package edu.lehigh.cse216.macrosoft.backend;

import java.net.URI;
import java.net.URISyntaxException;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;


/**
 * Encapsulate a fully configured database.
 */
class Database {

    /**
     * Database connection.
     */
    private Connection mConnection;

    /**
     * This class follows singleton design.
     */
    private Database() {}

    /**
     * There should only be one {@code Database} gets instantiated during
     * the lifetime of the application.
     */
    private static Database database;

    /**
     * Create a instance of database with url.
     * @param url the url that includes all credentials to connect to the
     *            postgres db.
     * @return the database
     */
    static Database getInstance(String url)
            throws SQLException, ClassNotFoundException, URISyntaxException {
        if (database == null) {
            Database db = new Database();
            db.getConnection(url);
            try {
                db.initPreparedStatements();
            } catch (SQLException exp) {
                db.disconnect();
                throw exp;
            }
            database = db;
        }
        return database;
    }

    /**
     * Make the database connection based on the url provided.  It sets the
     * {@code mConnection} directly upon success, and leaves it as {@code null}
     * upon errors.
     */
    private void getConnection(String url)
            throws SQLException, ClassNotFoundException, URISyntaxException {
        Class.forName("org.postgresql.Driver");
        URI dbUri = new URI(url);
        String username = dbUri.getUserInfo().split(":")[0];
        String password = dbUri.getUserInfo().split(":")[1];
        String dbUrl = String.format(
                "jdbc:postgresql://%s:%d%s?sslmode=require",
                dbUri.getHost(), dbUri.getPort(), dbUri.getPath()
        );
        Connection conn = DriverManager.getConnection(dbUrl, username, password);
        if (conn == null) {
            throw new SQLException("DriverManager.getConnection() returned a null object");
        }
        mConnection = conn;
    }

    /**
     * Disconnect from the database.
     */
    void disconnect() throws SQLException {
        if (mConnection == null) return;
        try {
            mConnection.close();
        } finally {
            mConnection = null;
        }
    }

    /*
     * Prepared statements of this Database.  Generated by the script.
     */
    private PreparedStatement mInsertUser;
    private PreparedStatement mSelectUserById;
    private PreparedStatement mSelectLatestUserId;
    private PreparedStatement mSelectUserByEmail;
    private PreparedStatement mBlockUserByEmail;
    private PreparedStatement mInsertPost;
    private PreparedStatement mSelectPostById;
    private PreparedStatement mSelectAllPosts;
    private PreparedStatement mSelectPostsByUserId;
    private PreparedStatement mSelectLatestPostId;
    private PreparedStatement mUpdatePostById;
    private PreparedStatement mUpdatePostVoteCountById;
    private PreparedStatement mUpdatePostFilePathById;
    private PreparedStatement mFlagPostById;
    private PreparedStatement mDeletePostById;
    private PreparedStatement mInsertComment;
    private PreparedStatement mSelectCommentByIds;
    private PreparedStatement mSelectCommentsByPostId;
    private PreparedStatement mSelectCommentsByUserId;
    private PreparedStatement mSelectCommentById;
    private PreparedStatement mSelectLatestCommentId;
    private PreparedStatement mUpdateCommentById;
    private PreparedStatement mUpdateCommentFilePathById;
    private PreparedStatement mFlagCommentById;
    private PreparedStatement mDeleteCommentsByPostId;
    private PreparedStatement mDeleteCommentByIds;
    private PreparedStatement mInsertVote;
    private PreparedStatement mSelectVoteByIds;
    private PreparedStatement mSelectUpVoteCountByPostId;
    private PreparedStatement mSelectDownVoteCountByPostId;
    private PreparedStatement mUpdateVoteByIds;
    private PreparedStatement mDeleteVotesByPostId;

    /**
     * Initialize the tables of this Database.  The primary job is to create
     * the {@code PreparedStatement}s for Database operations.  This function
     * is to be generated by the script.
     */
    private void initPreparedStatements() throws SQLException {
        mInsertUser = mConnection.prepareStatement("INSERT INTO users VALUES (default, ?, ?, ?, false)");
        mSelectUserById = mConnection.prepareStatement("SELECT * FROM users WHERE user_id=?");
        mSelectLatestUserId = mConnection.prepareStatement("SELECT MAX(user_id) FROM users");
        mSelectUserByEmail = mConnection.prepareStatement("SELECT * FROM users WHERE email=?");
        mBlockUserByEmail = mConnection.prepareStatement("UPDATE users SET blocked=true WHERE email=?");
        mInsertPost = mConnection.prepareStatement("INSERT INTO posts VALUES (default, ?, ?, default, 0, 0, ?, false, ?, default, ?, ?)");
        mSelectPostById = mConnection.prepareStatement("SELECT * FROM posts WHERE post_id=?");
        mSelectAllPosts = mConnection.prepareStatement("SELECT * FROM posts ORDER BY flagged DESC, date DESC");
        mSelectPostsByUserId = mConnection.prepareStatement("SELECT * FROM posts WHERE user_id=?");
        mSelectLatestPostId = mConnection.prepareStatement("SELECT MAX(post_id) FROM posts");
        mUpdatePostById = mConnection.prepareStatement("UPDATE posts SET title=?, content=? WHERE post_id=?");
        mUpdatePostVoteCountById = mConnection.prepareStatement("UPDATE posts SET vote_up=?, vote_down=? WHERE post_id=?");
        mUpdatePostFilePathById = mConnection.prepareStatement("UPDATE posts SET filepath=? WHERE post_id=?");
        mFlagPostById = mConnection.prepareStatement("UPDATE posts SET flagged =? WHERE post_id=?");
        mDeletePostById = mConnection.prepareStatement("DELETE FROM posts WHERE post_id=?");
        mInsertComment = mConnection.prepareStatement("INSERT INTO comments VALUES (default, ?, default, ?, ?, ?, default, ?, ?, false)");
        mSelectCommentByIds = mConnection.prepareStatement("SELECT * FROM comments WHERE post_id=? AND comment_id=?");
        mSelectCommentsByPostId = mConnection.prepareStatement("SELECT * FROM comments WHERE post_id=? ORDER BY date DESC");
        mSelectCommentsByUserId = mConnection.prepareStatement("SELECT * FROM comments WHERE user_id=?");
        mSelectCommentById = mConnection.prepareStatement("SELECT * FROM comments WHERE comment_id=?");
        mSelectLatestCommentId = mConnection.prepareStatement("SELECT MAX(comment_id) FROM comments");
        mUpdateCommentById = mConnection.prepareStatement("UPDATE comments SET content=? WHERE comment_id=?");
        mUpdateCommentFilePathById = mConnection.prepareStatement("UPDATE comments SET filepath=? WHERE comment_id=?");
        mFlagCommentById = mConnection.prepareStatement("UPDATE comments SET flagged =? WHERE comment_id=?");
        mDeleteCommentsByPostId = mConnection.prepareStatement("DELETE FROM comments WHERE post_id=?");
        mDeleteCommentByIds = mConnection.prepareStatement("DELETE FROM comments WHERE post_id=? AND comment_id=?");
        mInsertVote = mConnection.prepareStatement("INSERT INTO votes VALUES (?, ?, ?, ?)");
        mSelectVoteByIds = mConnection.prepareStatement("SELECT * FROM votes WHERE user_id=? AND post_id=?");
        mSelectUpVoteCountByPostId = mConnection.prepareStatement("SELECT COUNT(*) FROM votes WHERE post_id=? AND vote_up=true");
        mSelectDownVoteCountByPostId = mConnection.prepareStatement("SELECT COUNT(*) FROM votes WHERE post_id=? AND vote_down=true");
        mUpdateVoteByIds = mConnection.prepareStatement("UPDATE votes SET vote_up=?, vote_down=? WHERE user_id=? AND post_id=?");
        mDeleteVotesByPostId = mConnection.prepareStatement("DELETE FROM votes where post_id=?");
    }

    // **********************************************************************
    // *                database operations (generated)
    // **********************************************************************

    void insertUser(String email, String first, String last) throws SQLException {
        mInsertUser.setString(1, email);
        mInsertUser.setString(2, first);
        mInsertUser.setString(3, last);
        mInsertUser.executeUpdate();
    }

    ResultSet selectUserById(int userId) throws SQLException {
        mSelectUserById.setInt(1, userId);
        return mSelectUserById.executeQuery();
    }

    ResultSet selectLatestUserId() throws SQLException {
        return mSelectLatestUserId.executeQuery();
    }

    ResultSet selectUserByEmail(String email) throws SQLException {
        mSelectUserByEmail.setString(1, email);
        return mSelectUserByEmail.executeQuery();
    }

    void blockUserByEmail(String email) throws SQLException {
        mBlockUserByEmail.setString(1, email);
        mBlockUserByEmail.executeUpdate();
    }

    void insertPost(String title, String content, int userId, String filetype, String filepath, String links) throws SQLException {
        mInsertPost.setString(1, title);
        mInsertPost.setString(2, content);
        mInsertPost.setInt(3, userId);
        mInsertPost.setString(4, filetype);
        mInsertPost.setString(5, filepath);
        mInsertPost.setString(6, links);
        mInsertPost.executeUpdate();
    }

    ResultSet selectPostById(int postId) throws SQLException {
        mSelectPostById.setInt(1, postId);
        return mSelectPostById.executeQuery();
    }

    ResultSet selectAllPosts() throws SQLException {
        return mSelectAllPosts.executeQuery();
    }

    ResultSet selectPostsByUserId(int userId) throws SQLException {
        mSelectPostsByUserId.setInt(1, userId);
        return mSelectPostsByUserId.executeQuery();
    }

    ResultSet selectLatestPostId() throws SQLException {
        return mSelectLatestPostId.executeQuery();
    }

    void updatePostById(String title, String content, int postId) throws SQLException {
        mUpdatePostById.setString(1, title);
        mUpdatePostById.setString(2, content);
        mUpdatePostById.setInt(3, postId);
        mUpdatePostById.executeUpdate();
    }

    void updatePostVoteCountById(int upVote, int downVote, int postId) throws SQLException {
        mUpdatePostVoteCountById.setInt(1, upVote);
        mUpdatePostVoteCountById.setInt(2, downVote);
        mUpdatePostVoteCountById.setInt(3, postId);
        mUpdatePostVoteCountById.executeUpdate();
    }

    void updatePostFilePathById(String fullpath, int postId) throws SQLException {
        mUpdatePostFilePathById.setString(1, fullpath);
        mUpdatePostFilePathById.setInt(2, postId);
        mUpdatePostFilePathById.executeUpdate();
    }

    void flagPostById(boolean flagged, int postId) throws SQLException {
        mFlagPostById.setBoolean(1, flagged);
        mFlagPostById.setInt(2, postId);
        mFlagPostById.executeUpdate();
    }

    void deletePostById(int postId) throws SQLException {
        mDeletePostById.setInt(1, postId);
        mDeletePostById.executeUpdate();
    }

    void insertComment(String content, int userId, int postId, String filetype, String filepath, String links) throws SQLException {
        mInsertComment.setString(1, content);
        mInsertComment.setInt(2, userId);
        mInsertComment.setInt(3, postId);
        mInsertComment.setString(4, filetype);
        mInsertComment.setString(5, filepath);
        mInsertComment.setString(6, links);
        mInsertComment.executeUpdate();
    }

    ResultSet selectCommentByIds(int postId, int commentId) throws SQLException {
        mSelectCommentByIds.setInt(1, postId);
        mSelectCommentByIds.setInt(2, commentId);
        return mSelectCommentByIds.executeQuery();
    }

    ResultSet selectCommentsByPostId(int postId) throws SQLException {
        mSelectCommentsByPostId.setInt(1, postId);
        return mSelectCommentsByPostId.executeQuery();
    }

    ResultSet selectCommentsByUserId(int userId) throws SQLException {
        mSelectCommentsByUserId.setInt(1, userId);
        return mSelectCommentsByUserId.executeQuery();
    }

    ResultSet SelectCommentById(int commentId) throws SQLException {
        mSelectCommentById.setInt(1, commentId);
        return mSelectCommentById.executeQuery();
    }

    ResultSet selectLatestCommentId() throws SQLException {
        return mSelectLatestCommentId.executeQuery();
    }

    void updateCommentById(String content, int commentId) throws SQLException {
        mUpdateCommentById.setString(1, content);
        mUpdateCommentById.setInt(2, commentId);
        mUpdateCommentById.executeUpdate();
    }

    void updateCommentFilePathById(String fullpath, int commentId) throws SQLException {
        mUpdateCommentFilePathById.setString(1, fullpath);
        mUpdateCommentFilePathById.setInt(2, commentId);
        mUpdateCommentFilePathById.executeUpdate();
    }

    void flagCommentById(boolean flagged, int commentId) throws SQLException {
        mFlagCommentById.setBoolean(1, flagged);
        mFlagCommentById.setInt(2, commentId);
        mFlagCommentById.executeUpdate();
    }

    void deleteCommentsByPostId(int postId) throws SQLException {
        mDeleteCommentsByPostId.setInt(1, postId);
        mDeleteCommentsByPostId.executeUpdate();
    }

    void deleteCommentByIds(int postId, int commentId) throws SQLException {
        mDeleteCommentByIds.setInt(1, postId);
        mDeleteCommentByIds.setInt(2, commentId);
        mDeleteCommentByIds.executeUpdate();
    }

    void insertVote(int userId, int postId, boolean upVote, boolean downVote) throws SQLException {
        mInsertVote.setInt(1, userId);
        mInsertVote.setInt(2, postId);
        mInsertVote.setBoolean(3, upVote);
        mInsertVote.setBoolean(4, downVote);
        mInsertVote.executeUpdate();
    }

    ResultSet selectVoteByIds(int userId, int postId) throws SQLException {
        mSelectVoteByIds.setInt(1, userId);
        mSelectVoteByIds.setInt(2, postId);
        return mSelectVoteByIds.executeQuery();
    }

    ResultSet selectUpVoteCountByPostId(int postId) throws SQLException {
        mSelectUpVoteCountByPostId.setInt(1, postId);
        return mSelectUpVoteCountByPostId.executeQuery();
    }

    ResultSet selectDownVoteCountByPostId(int postId) throws SQLException {
        mSelectDownVoteCountByPostId.setInt(1, postId);
        return mSelectDownVoteCountByPostId.executeQuery();
    }

    void updateVoteByIds(boolean upVote, boolean downVote, int userId, int postId) throws SQLException {
        mUpdateVoteByIds.setBoolean(1, upVote);
        mUpdateVoteByIds.setBoolean(2, downVote);
        mUpdateVoteByIds.setInt(3, userId);
        mUpdateVoteByIds.setInt(4, postId);
        mUpdateVoteByIds.executeUpdate();
    }

    void deleteVotesByPostId(int postId) throws SQLException {
        mDeleteVotesByPostId.setInt(1, postId);
        mDeleteVotesByPostId.executeUpdate();
    }

}
