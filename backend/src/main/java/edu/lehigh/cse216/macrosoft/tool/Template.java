package edu.lehigh.cse216.macrosoft.tool; /* [PACKAGE] */

import java.net.URI;
import java.net.URISyntaxException;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/* [IMPORTS] */

/**
 * Encapsulate a fully configured database.
 */
class Template {

    /**
     * Database connection.
     */
    private Connection mConnection;

    /**
     * This class follows singleton design.
     */
    private Template() {}

    /**
     * There should only be one {@code Database} gets instantiated during
     * the lifetime of the application.
     */
    private static Template database;

    /**
     * Create a instance of database with url.
     * @param url the url that includes all credentials to connect to the
     *            postgres db.
     * @return the database
     */
    static Template getInstance(String url)
            throws SQLException, ClassNotFoundException, URISyntaxException {
        if (database == null) {
            Template db = new Template();
            db.getConnection(url);
            try {
                db.initPreparedStatements();
            } catch (SQLException exp) {
                db.disconnect();
                throw exp;
            }
            database = db;
        }
        return database;
    }

    /**
     * Make the database connection based on the url provided.  It sets the
     * {@code mConnection} directly upon success, and leaves it as {@code null}
     * upon errors.
     */
    private void getConnection(String url)
            throws SQLException, ClassNotFoundException, URISyntaxException {
        Class.forName("org.postgresql.Driver");
        URI dbUri = new URI(url);
        String username = dbUri.getUserInfo().split(":")[0];
        String password = dbUri.getUserInfo().split(":")[1];
        String dbUrl = String.format(
                "jdbc:postgresql://%s:%d%s?sslmode=require",
                dbUri.getHost(), dbUri.getPort(), dbUri.getPath()
        );
        Connection conn = DriverManager.getConnection(dbUrl, username, password);
        if (conn == null) {
            throw new SQLException("DriverManager.getConnection() returned a null object");
        }
        mConnection = conn;
    }

    /**
     * Disconnect from the database.
     */
    void disconnect() throws SQLException {
        if (mConnection == null) return;
        try {
            mConnection.close();
        } finally {
            mConnection = null;
        }
    }

    /*
     * Prepared statements of this Database.  Generated by the script.
     */
    /* [PREP_STMT] */

    /**
     * Initialize the tables of this Database.  The primary job is to create
     * the {@code PreparedStatement}s for Database operations.  This function
     * is to be generated by the script.
     */
    private void initPreparedStatements() throws SQLException {
        /* [INIT_PREP] */
    }

    // **********************************************************************
    // *                database operations (generated)
    // **********************************************************************

    /* [OPERATIONS] */
}
