package edu.lehigh.cse216.macrosoft.backend;



#############################
##       Table Users
#############################
#
# [?] createUserTable();
#     CREATE TABLE users (
#         user_id      SERIAL PRIMARY KEY,
#         email        VARCHAR(50),
#         first_name   VARCHAR(50),
#         last_name    VARCHAR(50),
#          blocked       BOOLEAN
#     );
#
# [?] dropUserTable();
#     DROP TABLE users;

[C] insertUser(String email, String first, String last);
    INSERT INTO users VALUES (default, ?, ?, ?, false);

[R] selectUserById(int userId);
    SELECT * FROM users WHERE user_id=?;

[R] selectLatestUserId();
    SELECT MAX(user_id) FROM users;

[R] selectUserByEmail(String email);
    SELECT * FROM users WHERE email=?;

[U] blockUserByEmail(String email);
    UPDATE users SET blocked=true WHERE email=?;

#############################
##       Table Posts
#############################
#
# [?] createPostTable();
#     CREATE TABLE posts (
#         post_id     SERIAL PRIMARY KEY,
#         title       VARCHAR(100),
#         content     VARCHAR(500),
#         date        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
#         vote_up     INTEGER,
#         vote_down   INTEGER,
#         user_id     INTEGER REFERENCES users (user_id),
#         flagged      BOOLEAN,
#         filetype    VARCHAR(10),
#         filedate    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  # future PUT
#         filepath    VARCHAR(100),
#         links       VARCHAR(500)
#     );
#
# [?] dropPostTable();
#     Drop TABLE posts;

[C] insertPost(String title, String content, int userId,
               String filetype, String filepath, String links);
    INSERT INTO posts VALUES (default, ?, ?, default, 0, 0, ?, false, ?, default, ?, ?);

[R] selectPostById(int postId);
    SELECT * FROM posts WHERE post_id=?;

[R] selectAllPosts();
    SELECT * FROM posts ORDER BY flagged DESC, date DESC;

[R] selectPostsByUserId(int userId);
    SELECT * FROM posts WHERE user_id=?;

[R] selectLatestPostId();
    SELECT MAX(post_id) FROM posts;

[U] updatePostById(String title, String content, int postId);
    UPDATE posts SET title=?, content=? WHERE post_id=?;

[U] updatePostVoteCountById(int upVote, int downVote, int postId);
    UPDATE posts SET vote_up=?, vote_down=? WHERE post_id=?;

[U] updatePostFilePathById(String fullpath, int postId);
    UPDATE posts SET filepath=? WHERE post_id=?;

[U] flagPostById(boolean flagged, int postId);
    UPDATE posts SET flagged =? WHERE post_id=?; 

[D] deletePostById(int postId);
    DELETE FROM posts WHERE post_id=?;



#############################
##      Table Comments
#############################
#
# [?] createCommentTable();
#     CREATE TABLE comments (
#         comment_id   SERIAL PRIMARY KEY,
#         content      VARCHAR(500),
#         date         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
#         user_id      INTEGER REFERENCES users (user_id),
#         post_id      INTEGER REFERENCES posts (post_id),
#         filetype     VARCHAR(10),
#         filedate     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
#         filepath     VARCHAR(100),
#         links        VARCHAR(500),
#         flagged      BOOLEAN
#     );
#
# [?] dropCommentTable();
#     DROP TABLE comments;

[C] insertComment(String content, int userId, int postId,
                  String filetype, String filepath, String links);
    INSERT INTO comments VALUES (default, ?, default, ?, ?, ?, default, ?, ?, false);

[R] selectCommentByIds(int postId, int commentId);
    SELECT * FROM comments WHERE post_id=? AND comment_id=?;

[R] selectCommentsByPostId(int postId);
    SELECT * FROM comments WHERE post_id=? ORDER BY date DESC;

[R] selectCommentsByUserId(int userId);
    SELECT * FROM comments WHERE user_id=?;

[R] SelectCommentById(int commentId); 
    SELECT * FROM comments WHERE comment_id=?;

[R] selectLatestCommentId();
    SELECT MAX(comment_id) FROM comments;

[U] updateCommentById(String content, int commentId);
    UPDATE comments SET content=? WHERE comment_id=?;

[U] updateCommentFilePathById(String fullpath, int commentId);
    UPDATE comments SET filepath=? WHERE comment_id=?;

[U] flagCommentById(boolean flagged, int commentId);
    UPDATE comments SET flagged =? WHERE comment_id=?; 

[D] deleteCommentsByPostId(int postId);
    DELETE FROM comments WHERE post_id=?;

[D] deleteCommentByIds(int postId, int commentId);
    DELETE FROM comments WHERE post_id=? AND comment_id=?;



#############################
##      Table Votes
#############################
#
# [?] createVoteTable();
#     CREATE TABLE votes (
#         user_id     SERIAL PRIMARY KEY,
#         post_id     SERIAL PRIMARY KEY,
#         vote_up     BOOLEAN,
#         vote_down   BOOLEAN
#     );
#
# [?] dropVoteTable();
#     DROP TABLE votes;

[C] insertVote(int userId, int postId,
               boolean upVote, boolean downVote);
    INSERT INTO votes VALUES (?, ?, ?, ?);

[R] selectVoteByIds(int userId, int postId);
    SELECT * FROM votes WHERE user_id=? AND post_id=?;

[R] selectUpVoteCountByPostId(int postId);
    SELECT COUNT(*) FROM votes WHERE post_id=? AND vote_up=true;

[R] selectDownVoteCountByPostId(int postId);
    SELECT COUNT(*) FROM votes WHERE post_id=? AND vote_down=true;

[U] updateVoteByIds(boolean upVote, boolean downVote,
                    int userId, int postId);
    UPDATE votes SET vote_up=?, vote_down=? WHERE user_id=? AND post_id=?;

[D] deleteVotesByPostId(int postId);
    DELETE FROM votes where post_id=?;
